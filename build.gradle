def workingDir = rootDir.absolutePath
def generatedFolderPath = "${workingDir}/out/"
def generatorPath = "${workingDir}/generator"
def javaTemplatePath = "${workingDir}/rpc-lib4j/templates"
def specPath = "${workingDir}/spec/"
def javaLibraryPath = "${workingDir}/rpc-lib4j/src/main/java/org/aion/rpc"
def javaGeneratedTestsPath = "${workingDir}/rpc-lib4j/tests"
def buildRoot = "${rootDir.absolutePath}/build"

allprojects{
    apply plugin: 'java'
    apply plugin: 'idea'
    buildDir="${buildRoot}/${project.name}"
}

wrapper{
    gradleVersion = '5.6'
    distributionType = Wrapper.DistributionType.BIN
}

subprojects {
    sourceCompatibility = 1.10
}

task cleanGenerated(type:Delete) {
    delete ("${generatorPath}")
    delete ("${generatedFolderPath}")
}

task cleanOut(type: Delete){
    delete ("${buildRoot}")
}

clean{
    dependsOn 'cleanGenerated'
    dependsOn 'cleanOut'
}

task createGenerator(type: Copy){
    dependsOn(":rpc-gen:build")
    def rpcZipFile = file("${rootDir.absolutePath}/build/rpc-gen/distributions/generator.zip")
    def outputDir = file("${rootDir}/.")

    from zipTree(rpcZipFile)
    into outputDir
}

task copyJavaExceptions(type: Copy){
    from "${generatedFolderPath}/errors"
    into "${javaLibraryPath}/errors"
    include "*.java"
}

task copyJavaClientMethods(type:Copy){
    from "${generatedFolderPath}/rpc/RPCClientMethods.java"
    into "${javaLibraryPath}/client"
}

task copyJavaServerMethods(type:Copy){
    from "${generatedFolderPath}/rpc/RPCServerMethods.java"
    into "${javaLibraryPath}/server"
}

task copyJavaTypes(type:Copy){
    from "${generatedFolderPath}/types"
    into "${javaLibraryPath}/types"
    include "*.java"
}

task copyJavaTests(type:Copy){
    from "${generatedFolderPath}/rpc"
    into "${javaGeneratedTestsPath}"
    include "*Test*.java"
}

task copyAllGeneratedJava(type:Copy){
    dependsOn  'copyJavaExceptions', 'copyJavaClientMethods', 'copyJavaServerMethods', 'copyJavaTypes', 'copyJavaTests'
}

task packageGeneratedFiles4J(){
    dependsOn 'copyAllGeneratedJava'
    dependsOn ':rpc-lib4j:build', ':rpc-lib4j:shadowJar'
    doFirst{
        println("Compiling jars")
    }
}


task genJava(type:Exec){
    dependsOn 'clean', 'createGenerator'
    def stdOut = new ByteArrayOutputStream()
    standardOutput=stdOut
    commandLine("$generatorPath/bin/generator",
            '-s',
            "$specPath",
            '-o', "$generatedFolderPath",
            "--templates", "$javaTemplatePath/types",
            "$javaTemplatePath/errors",
            "$javaTemplatePath/rpc")

    ant.echo(standardOutput.toString())

    finalizedBy {
        'packageGeneratedFiles4J'
    }
}



static def getCommitHash() {
    def proc = "git rev-parse --short HEAD".execute()
    proc.waitFor()
    return proc.text.trim()
}
