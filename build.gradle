def workingDir = rootDir.absolutePath
def generatedFolderPath = "${workingDir}/out/"
def generatorPath = "${workingDir}/generator"
def javaTemplatePath = "${workingDir}/rpc-lib4j/templates"
def rustTemplatePath = "${workingDir}/rpc-lib4r/templates"
def javaConfigurationPath = "${workingDir}/rpc-lib4j/configuration/configuration.xml"
def rustConfigurationPath = "${workingDir}/rpc-lib4r/configuration/configuration.xml"
def specPath = "${workingDir}/spec/"
def buildRoot = "${rootDir.absolutePath}/build"

allprojects{
    apply plugin: 'idea'
    apply plugin: 'base'
    buildDir="${buildRoot}/${project.name}"
}

wrapper{
    gradleVersion = '5.6'
    distributionType = Wrapper.DistributionType.BIN
}

subprojects {
}

task cleanGenerated(type:Delete) {
    delete ("${generatorPath}")
    delete ("${generatedFolderPath}")
}

task cleanOut(type: Delete){
    delete ("${buildRoot}")
}

clean{
    dependsOn 'cleanGenerated'
    dependsOn 'cleanOut'
}

task createGenerator(type: Copy){
    dependsOn(":rpc-gen:build")
    def rpcZipFile = file("${rootDir.absolutePath}/build/rpc-gen/distributions/generator.zip")
    def outputDir = file("${rootDir}/.")

    from zipTree(rpcZipFile)
    into outputDir
}


task printSpec(type: Exec){
    dependsOn 'clean'
    dependsOn('createGenerator')
    if (project.hasProperty('filePath')) {
        commandLine("$generatorPath/bin/generator",
                "print",
                '-f',
                project.property('filePath'))
    } else {
        commandLine("$generatorPath/bin/generator",
                "print",
                '--help')
    }
}

task genJava(type:Exec){
    dependsOn 'clean', 'createGenerator'
    commandLine("$generatorPath/bin/generator",
            '-s',
            "$specPath",
            '-o', "$generatedFolderPath",
            "--templates", "$javaTemplatePath",
            "--config", "$javaConfigurationPath")

    finalizedBy {
        ':rpc-lib4j:packageGeneratedFiles4J'
    }
}

task genRust(type:Exec){
    dependsOn 'clean', 'createGenerator'
    commandLine("$generatorPath/bin/generator",
            '-s',
            "$specPath",
            '-o', "$generatedFolderPath",
            "--templates", "$rustTemplatePath",
            "--config", "$rustConfigurationPath")
    finalizedBy {
        ':rpc-lib4r:packageGeneratedFiles4R'
    }
}


static def getCommitHash() {
    def proc = "git rev-parse --short HEAD".execute()
    proc.waitFor()
    return proc.text.trim()
}
